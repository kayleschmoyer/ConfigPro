const templateCatalog = [
  {
    channel: 'Email service',
    description:
      'Long-form narratives with branding, attachments, and compliance footers distributed through the SMTP relay network.',
    templates: [
      {
        name: 'Order confirmation',
        purpose:
          'Confirms purchase, outlines fulfilment timeline, and reminds customers about pickup or delivery preferences.',
        personalization: ['Customer name', 'Order summary block', 'Fulfilment promise window', 'Support escalation link'],
        governance: [
          'Render in transactional theme with legal footer segments managed by brand governance.',
          'Enforce locale specific tax and return policy snippets.',
          'Attachments allowed for invoices and statements only.',
        ],
      },
      {
        name: 'Schedule disruption',
        purpose:
          'Notifies frontline teams when staffing plans breach compliance or coverage thresholds so that mitigation can begin.',
        personalization: ['Location and department context', 'Breached threshold value', 'Recommended next action'],
        governance: [
          'Send to dynamic distribution lists curated from ConfigPro role assignments.',
          'Route copies to Workforce Ops shared mailbox for escalations.',
          'Respect quiet hours defined at the location profile level.',
        ],
      },
      {
        name: 'Billing incident',
        purpose:
          'Alerts finance when payment provider anomalies are detected by the reconciler and requires manual attention.',
        personalization: ['Gateway name', 'Incident identifier', 'Impacted transaction count', 'Runbook deep link'],
        governance: [
          'Attach CSV of impacted settlements generated by finance workspace.',
          'Escalate after 30 minutes with reminder thread when unresolved.',
          'Automatically open Jira automation via webhook metadata.',
        ],
      },
    ],
  },
  {
    channel: 'SMS service',
    description:
      'Short form alerts orchestrated through Twilio or Syniverse for time-sensitive operational nudges.',
    templates: [
      {
        name: 'Shift reminder',
        purpose: 'Delivers start time reminders plus the quick confirm link for frontline teammates.',
        personalization: ['Employee preferred name', 'Shift start time', 'Confirmation short link'],
        governance: [
          'Respect communication opt-in flags from HR master data.',
          'Cap send window to 6-12 hours before shift start.',
          'Log delivery receipts for workforce analytics.',
        ],
      },
      {
        name: 'Maintenance dispatch',
        purpose: 'Alerts on-call facilities vendor with ticket summary when urgent work orders are raised.',
        personalization: ['Site name', 'Asset category', 'Priority code', 'Live incident link'],
        governance: [
          'Include reply handler to capture accept/decline responses into ConfigPro.',
          'Fail over to voice call escalation ladder on undelivered receipts.',
          'Ensure vendor specific compliance copy appended per contract.',
        ],
      },
      {
        name: 'Payment risk alert',
        purpose: 'Pings duty risk analyst when high fraud score orders breach the configurable threshold.',
        personalization: ['Order ID', 'Score value', 'Risk engine explanation snippet'],
        governance: [
          'Throttle to once every 10 minutes per analyst to prevent fatigue.',
          'Mirror alert into Slack incident channel through webhook bridge.',
          'Disable outside of monitored hours defined in analytics workspace.',
        ],
      },
    ],
  },
  {
    channel: 'Push service',
    description:
      'In-app and mobile push notifications managed via Firebase Cloud Messaging or OneSignal orchestration.',
    templates: [
      {
        name: 'Manager digest',
        purpose: 'Summarises priority tasks for store managers during open and close routines.',
        personalization: ['Store KPIs', 'Outstanding tasks count', 'One-tap acknowledge action'],
        governance: [
          'Respect device quiet hour settings; queue until active window.',
          'Sync badge counts to mobile shell for consistent state.',
          'Backfill content to in-app inbox when push is disabled.',
        ],
      },
      {
        name: 'Customer order ready',
        purpose: 'Lets customers know digital orders are staged or delivered to lockers.',
        personalization: ['Order nickname', 'Pickup bay number', 'Expiration countdown'],
        governance: [
          'Translate automatically based on customer locale preference.',
          'Expire message after pickup SLA and trigger fallback SMS.',
          'Log acknowledgement event for CX analytics downstream.',
        ],
      },
      {
        name: 'Field incident update',
        purpose: 'Keeps regional operators aware of live field incidents with evolving status changes.',
        personalization: ['Incident severity', 'Region cluster', 'Next milestone ETA'],
        governance: [
          'Chain into command center workspace for additional context.',
          'Respect subscribe/unsubscribe preferences managed in ConfigPro.',
          'Escalate to email summary if three pushes are ignored.',
        ],
      },
    ],
  },
];

const triggerPlaybooks = [
  {
    title: 'Customer lifecycle',
    description: 'Signals orchestrated across commerce, loyalty, and fulfilment journeys.',
    triggers: [
      {
        name: 'order.confirmed',
        channels: ['email', 'push'],
        defaultTemplates: {
          email: 'order-confirmation',
          push: 'customer-order-ready',
        },
        automations: [
          'Fetch fulfilment estimate from order orchestration workspace.',
          'Schedule pickup reminder SMS if order remains unclaimed after SLA/2.',
          'Suppress messaging when fraud hold flag is present.',
        ],
      },
      {
        name: 'loyalty.tier-upgrade',
        channels: ['email', 'sms'],
        defaultTemplates: {
          email: 'loyalty-upgrade-announcement',
          sms: 'loyalty-upgrade-nudge',
        },
        automations: [
          'Calculate personalised benefit summary from loyalty ledger.',
          'Trigger gift-with-purchase coupon via promotions service.',
          'Write event to customer timeline with audit metadata.',
        ],
      },
      {
        name: 'return.completed',
        channels: ['email'],
        defaultTemplates: {
          email: 'return-completion',
        },
        automations: [
          'Attach refund memo generated by finance system of record.',
          'Update case ticket with communication transcript URL.',
          'Publish analytics event for NPS follow-up workflow.',
        ],
      },
    ],
  },
  {
    title: 'Operational intelligence',
    description: 'Alerts for workforce, facilities, and payments control towers.',
    triggers: [
      {
        name: 'schedule.threshold-breached',
        channels: ['email', 'sms'],
        defaultTemplates: {
          email: 'schedule-disruption',
          sms: 'shift-reminder',
        },
        automations: [
          'Aggregate impacted shifts by role before composing message.',
          'Route to escalation ladder maintained in workforce workspace.',
          'Post summary to incident command Slack channel.',
        ],
      },
      {
        name: 'workorder.dispatched',
        channels: ['sms', 'push'],
        defaultTemplates: {
          sms: 'maintenance-dispatch',
          push: 'field-incident-update',
        },
        automations: [
          'Pull vendor contact preferences from supplier registry.',
          'Record acknowledgement receipts back to work management hub.',
          'Fallback to phone escalation if no response within 10 minutes.',
        ],
      },
      {
        name: 'payments.anomaly-detected',
        channels: ['email', 'sms'],
        defaultTemplates: {
          email: 'billing-incident',
          sms: 'payment-risk-alert',
        },
        automations: [
          'Include latest reconciliation snapshot from finance adapter.',
          'Open Sev2 incident in on-call platform automatically.',
          'Throttle repeated sends with dedupe key per provider incident.',
        ],
      },
    ],
  },
];

const providerBlueprints = [
  {
    id: 'smtp',
    name: 'SMTP relay',
    vendors: ['SendGrid', 'Postmark', 'AWS SES'],
    channel: 'Email',
    guardrails: [
      'Rotating credentials managed through ConfigPro secrets vault.',
      'DKIM and DMARC alignment monitored with automated health checks.',
      'Bulk and transactional IP pools tracked separately for reputation.',
    ],
  },
  {
    id: 'twilio',
    name: 'Twilio messaging',
    vendors: ['Twilio', 'Syniverse'],
    channel: 'SMS',
    guardrails: [
      'Register 10DLC campaigns with compliance evidence stored centrally.',
      'Route high-value OTP traffic through redundant short codes.',
      'Capture delivery receipts and opt-out events for auditing.',
    ],
  },
  {
    id: 'push',
    name: 'Push orchestration',
    vendors: ['Firebase Cloud Messaging', 'OneSignal'],
    channel: 'Push',
    guardrails: [
      'Maintain device tokens with automatic expiry pruning jobs.',
      'Segment campaigns by app version to avoid unsupported actions.',
      'Synchronise click analytics back into customer engagement models.',
    ],
  },
];

export const NotificationsPage = () => {
  return (
    <div className="space-y-12">
      <header className="space-y-3">
        <p className="text-sm font-medium uppercase tracking-wide text-muted-foreground">Shared platform</p>
        <h1 className="text-3xl font-semibold text-foreground">Notification orchestration hub</h1>
        <p className="max-w-3xl text-base text-muted-foreground">
          Govern omni-channel notifications with reusable templates, opinionated triggers, and provider
          guardrails that keep communications compliant and observable. ConfigPro centralises the messaging
          strategy so every product surface can ship journeys with confidence.
        </p>
      </header>

      <section aria-labelledby="template-catalog" className="space-y-6">
        <header className="space-y-1">
          <h2 id="template-catalog" className="text-xl font-semibold text-foreground">
            Template catalog
          </h2>
          <p className="text-sm text-muted-foreground">
            Curate channel-specific blueprints with consistent variables, guardrails, and automation guidance.
          </p>
        </header>

        <div className="grid gap-6 lg:grid-cols-3">
          {templateCatalog.map((catalog) => (
            <article key={catalog.channel} className="flex h-full flex-col rounded-lg border border-border bg-card p-5 shadow-sm">
              <header className="space-y-2">
                <h3 className="text-lg font-semibold text-foreground">{catalog.channel}</h3>
                <p className="text-sm text-muted-foreground">{catalog.description}</p>
              </header>

              <div className="mt-4 space-y-5 text-sm text-muted-foreground">
                {catalog.templates.map((template) => (
                  <div key={template.name} className="space-y-2">
                    <h4 className="text-base font-semibold text-foreground">{template.name}</h4>
                    <p>{template.purpose}</p>
                    <div>
                      <span className="font-medium text-foreground">Personalisation:</span>{' '}
                      {template.personalization.join(', ')}
                    </div>
                    <ul className="space-y-1">
                      {template.governance.map((rule) => (
                        <li key={rule} className="flex gap-2">
                          <span aria-hidden className="mt-1 h-1.5 w-1.5 rounded-full bg-primary" />
                          <span>{rule}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </article>
          ))}
        </div>
      </section>

      <section aria-labelledby="trigger-playbooks" className="space-y-6">
        <header className="space-y-1">
          <h2 id="trigger-playbooks" className="text-xl font-semibold text-foreground">
            Trigger playbooks
          </h2>
          <p className="text-sm text-muted-foreground">
            Standard events and routing logic that downstream teams can subscribe to without reinventing governance.
          </p>
        </header>

        <div className="grid gap-6 md:grid-cols-2">
          {triggerPlaybooks.map((group) => (
            <article key={group.title} className="space-y-4 rounded-lg border border-border bg-card p-5 shadow-sm">
              <header className="space-y-1">
                <h3 className="text-lg font-semibold text-foreground">{group.title}</h3>
                <p className="text-sm text-muted-foreground">{group.description}</p>
              </header>

              <div className="space-y-4">
                {group.triggers.map((trigger) => (
                  <div key={trigger.name} className="space-y-2 text-sm text-muted-foreground">
                    <div className="flex items-baseline justify-between gap-4">
                      <h4 className="text-base font-semibold text-foreground">{trigger.name}</h4>
                      <span className="rounded-full bg-muted px-2 py-0.5 text-xs uppercase tracking-wide text-muted-foreground">
                        {trigger.channels.join(' • ')}
                      </span>
                    </div>
                    <div>
                      <span className="font-medium text-foreground">Default templates:</span>{' '}
                      {Object.entries(trigger.defaultTemplates)
                        .map(([channel, template]) => `${channel}: ${template}`)
                        .join(', ')}
                    </div>
                    <ul className="space-y-1">
                      {trigger.automations.map((automation) => (
                        <li key={automation} className="flex gap-2">
                          <span aria-hidden className="mt-1 h-1.5 w-1.5 rounded-full bg-primary" />
                          <span>{automation}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </article>
          ))}
        </div>
      </section>

      <section aria-labelledby="provider-blueprints" className="space-y-6">
        <header className="space-y-1">
          <h2 id="provider-blueprints" className="text-xl font-semibold text-foreground">
            Provider blueprints
          </h2>
          <p className="text-sm text-muted-foreground">
            Harmonise operational guardrails for every delivery channel regardless of the underlying vendor.
          </p>
        </header>

        <div className="grid gap-6 md:grid-cols-3">
          {providerBlueprints.map((provider) => (
            <article key={provider.id} className="space-y-3 rounded-lg border border-border bg-card p-5 shadow-sm">
              <header className="space-y-1">
                <h3 className="text-base font-semibold text-foreground">{provider.name}</h3>
                <p className="text-xs uppercase tracking-wide text-muted-foreground">{provider.channel}</p>
              </header>

              <div className="text-sm text-muted-foreground">
                <span className="font-medium text-foreground">Preferred vendors:</span>{' '}
                {provider.vendors.join(', ')}
              </div>

              <ul className="space-y-1 text-sm text-muted-foreground">
                {provider.guardrails.map((guardrail) => (
                  <li key={guardrail} className="flex gap-2">
                    <span aria-hidden className="mt-1 h-1.5 w-1.5 rounded-full bg-primary" />
                    <span>{guardrail}</span>
                  </li>
                ))}
              </ul>
            </article>
          ))}
        </div>
      </section>
    </div>
  );
};
